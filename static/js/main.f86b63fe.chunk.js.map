{"version":3,"sources":["app/components/Button.tsx","app/components/Select.tsx","library/EventHandler.tsx","library/VideoStream.tsx","library/Stream.tsx","library/User.tsx","library/WebRTCDeviceManager.tsx","app/contexts/WebRTCDeviceManagerContext.tsx","app/contexts/UserContext.tsx","app/components/Video.tsx","app/pages/DeviceDiscoveryPage/DeviceDiscoveryPage.tsx","app/pages/HomePage/HomePage.tsx","library/Peer.tsx","library/PeerManager.tsx","app/config/rtcConfiguration.tsx","app/contexts/SocketContext.tsx","app/contexts/PeerManagerContext.tsx","library/Chat.tsx","app/contexts/ChatContext.tsx","app/pages/ConferencePage/ConferencePage.tsx","app/App.tsx","index.tsx"],"names":["Button","styled","button","disabled","css","Select","select","props","width","EventHandler","listeners","listen","type","eventHandler","push","fire","params","forEach","listener","unlisten","withEventHandler","Base","addEventListener","removeEventListener","VideoStream","isMuted","isHidden","toggleVideo","getVideoTracks","track","enabled","toggleAudio","getAudioTracks","hide","show","mute","unmute","removeTracks","getTracks","stop","removeTrack","addTracks","tracks","addTrack","updateStream","stream","stopStream","MediaStream","name","email","getName","setName","getEmail","setEmail","getStream","setStream","this","constraints","video","audio","videoDevices","audioDevices","handleDeviceChange","a","navigator","mediaDevices","enumerateDevices","devices","filter","device","kind","sort","isEqual","updateConstraints","selectVideoDeviceById","deviceId","requestStream","selectAudioDeviceById","getUserMedia","getSelectedVideoDevice","getSelectedAudioDevice","getSelectedDevice","find","label","WebRTCDeviceManagerContext","React","createContext","requestPermission","useWebRTCDeviceManager","context","useContext","undefined","Error","WebRTCDeviceManagerProvider","children","WebRTCDeviceManagerInstance","useRef","WebRTCDeviceManager","current","useState","setVideoDevices","setAudioDevices","selectedVideoDevice","setSelectedVideoDevice","selectedAudioDevice","setSelectedAudioDevice","useEffect","webRTCDeviceManagerContext","useMemo","Provider","value","UserContext","useUser","UserProvider","UserInstance","User","videoStream","userContext","user","updateName","updateEmail","Video","srcObject","withControls","refVideo","isVideoActive","setIsVideoActive","isAudioActive","setIsAudioActive","useCallback","style","display","alignItems","justifyContent","backgroundColor","position","ref","top","left","right","bottom","margin","onClick","DeviceDiscoveryPage","handleInputChange","event","target","handleVideoSelectChange","handleAudioSelectChange","className","muted","autoPlay","playsInline","onChange","placeholder","map","videoDevice","audioDevice","to","length","HomePage","socket","socketId","opts","onSignal","data","emit","signal","onStream","getUser","on","SimplePeer","configuration","peers","connect","newCaller","receivedCall","removePeer","disconnect","addPeer","isInitiator","Peer","config","initiator","Object","keys","key","destroy","rtcConfiguration","iceServers","urls","url","credential","username","SocketContext","useSocket","SocketProvider","endpoint","socketIOClient","autoConnect","PeerManagerContext","PeerManagerProvider","setPeers","PeerManagerInstance","PeerManager","peerManagerContext","messages","receive","chatMessage","send","message","getMessages","ChatContext","ChatProvider","setMessages","ChatInstance","Chat","chatContext","sendMessage","ConferencePage","usePeerManager","setMessage","useChat","then","auth","handleMessage","handleSubmit","preventDefault","peer","index","maxWidth","maxHeight","toString","m","onSubmit","App","path","default","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f86b63fe.chunk.js","sourcesContent":["import styled, { css } from \"styled-components\";\n\nconst Button = styled.button`\n  padding: 0.5em 1em;\n  border-style: solid;\n  border-width: 2px;\n  border-color: #005450;\n  border-radius: 3px;\n  background-color: #005450;\n  color: white;\n  font-weight: 800;\n  font-size: 1em;\n  cursor: pointer;\n\n  &:hover {\n    opacity: 0.75;\n  }\n\n  &:focus {\n    outline: none;\n  }\n\n  ${({\n    disabled,\n  }: React.HTMLAttributes<HTMLButtonElement> & { disabled?: boolean }) =>\n    disabled &&\n    css`\n      opacity: 0.75;\n    `}\n`;\n\nexport default Button;\n","import React from \"react\";\nimport styled, { css } from \"styled-components\";\n\nconst Select = styled.select`\n  padding: 10px;\n  border-style: solid;\n  border-width: 1px;\n  border-radius: 3px;\n  border-color: #353640;\n  color: #353640;\n  font-weight: 800;\n  font-size: 1em;\n  cursor: pointer;\n\n  &:focus {\n    outline: none;\n  }\n\n  ${(props: React.HTMLAttributes<HTMLSelectElement> & { width?: string }) =>\n    props.width &&\n    css`\n      width: ${props.width};\n    `}\n`;\n\nexport default Select;\n","type Constructor = new (...args: any[]) => {};\n\ntype Parameters<T> = T extends (...args: infer T) => any ? T : never;\n\nclass EventHandler<T extends { [key: string]: Function }> {\n  listeners: { [key in keyof T]?: T[keyof T][] } = {};\n  listen = <U extends keyof T>(type: U, eventHandler: T[U]) => {\n    if (!this.listeners[type]) this.listeners[type] = [];\n    this.listeners[type]?.push(eventHandler);\n  };\n\n  fire = <U extends keyof T>(type: U, ...params: Parameters<T[U]>) => {\n    this.listeners[type]?.forEach((listener) => {\n      listener(...params);\n    });\n  };\n\n  unlisten = <U extends keyof T>(type: U, eventHandler: T[U]) => {\n    this.listeners[type]?.forEach((listener) => listener !== eventHandler);\n  };\n}\n\nexport function withEventHandler<\n  T extends { [key: string]: Function },\n  TBase extends Constructor\n>(Base: TBase) {\n  return class extends Base {\n    eventHandler = new EventHandler<T>();\n\n    addEventListener = <U extends keyof T>(type: U, listener: T[U]) => {\n      this.eventHandler.listen(type, listener);\n    };\n\n    removeEventListener = <U extends keyof T>(type: U, listener: T[U]) => {\n      this.eventHandler.unlisten(type, listener);\n    };\n  };\n}\n\nexport default EventHandler;\n","import Stream from \"./Stream\";\n\nclass VideoStream extends Stream {\n  isMuted = false;\n  isHidden = false;\n\n  toggleVideo = () => {\n    this.isHidden = !this.isHidden;\n    this.getVideoTracks().forEach((track) => {\n      track.enabled = this.isHidden;\n    });\n  };\n\n  toggleAudio = () => {\n    this.isMuted = !this.isMuted;\n    this.getAudioTracks().forEach((track) => {\n      track.enabled = this.isMuted;\n    });\n  };\n\n  hide = () => {\n    this.isHidden = false;\n    this.toggleVideo();\n  };\n\n  show = () => {\n    this.isHidden = true;\n    this.toggleVideo();\n  };\n\n  mute = () => {\n    this.isMuted = false;\n    this.toggleAudio();\n  };\n\n  unmute = () => {\n    this.isMuted = true;\n    this.toggleAudio();\n  };\n}\n\nexport default VideoStream;\n","class Stream extends MediaStream {\n  removeTracks = () => {\n    this.getTracks().forEach((track) => {\n      track.stop();\n      this.removeTrack(track);\n    });\n  };\n\n  addTracks = (tracks: MediaStreamTrack[]) => {\n    tracks.forEach((track) => {\n      this.addTrack(track);\n    });\n  };\n\n  updateStream = (stream: MediaStream) => {\n    this.removeTracks();\n    this.addTracks(stream.getTracks());\n  };\n\n  stopStream = () => {\n    this.getTracks().forEach((track) => {\n      track.stop();\n    });\n  };\n}\n\nexport default Stream;\n","import EventHandler, { withEventHandler } from \"./EventHandler\";\nimport VideoStream from \"./VideoStream\";\n\ntype UserEvent = {\n  onNameChange: (name: string) => void;\n  onEmailChange: (email: string) => void;\n};\n\nclass User {\n  name: string;\n  email?: string;\n  stream: VideoStream;\n  eventHandler: EventHandler<UserEvent>;\n\n  constructor(name: string = \"\", email: string = \"\") {\n    this.name = name;\n    this.email = email;\n    this.stream = new VideoStream();\n    this.eventHandler = new EventHandler<UserEvent>();\n  }\n\n  getName = () => {\n    return this.name;\n  };\n\n  setName = (name: string) => {\n    this.name = name;\n    this.eventHandler.fire(\"onNameChange\", name);\n  };\n\n  getEmail = () => {\n    return this.email;\n  };\n\n  setEmail = (email: string) => {\n    this.email = email;\n    this.eventHandler.fire(\"onEmailChange\", email);\n  };\n\n  getStream = () => {\n    return this.stream;\n  };\n\n  setStream = (stream: MediaStream) => {\n    this.stream.updateStream(stream);\n  };\n}\n\nexport default withEventHandler<UserEvent, typeof User>(User);\n","import EventHandler, { withEventHandler } from \"./EventHandler\";\nimport { isEqual } from \"lodash\";\n\ntype WebRTCDeviceManagerEvent = {\n  onStreamChange: (stream: MediaStream) => void;\n  onVideoDeviceChange: (videoDevices: MediaDeviceInfo[]) => void;\n  onAudioDeviceChange: (audioDevices: MediaDeviceInfo[]) => void;\n  onSelectedVideoDeviceChange: (videoDevice?: MediaDeviceInfo) => void;\n  onSelectedAudioDeviceChange: (audioDevice?: MediaDeviceInfo) => void;\n};\n\nclass WebRTCDeviceManager {\n  constraints: MediaStreamConstraints = {\n    video: true,\n    audio: true,\n  };\n\n  videoDevices: MediaDeviceInfo[] = [];\n  audioDevices: MediaDeviceInfo[] = [];\n  stream: MediaStream = new MediaStream();\n  eventHandler = new EventHandler<WebRTCDeviceManagerEvent>();\n\n  constructor() {\n    navigator.mediaDevices.addEventListener(\n      \"devicechange\",\n      this.handleDeviceChange\n    );\n  }\n\n  handleDeviceChange = async () => {\n    const devices = await navigator.mediaDevices.enumerateDevices();\n    const videoDevices = devices\n      .filter((device) => device.kind === \"videoinput\")\n      .sort();\n\n    if (!isEqual(videoDevices, this.videoDevices)) {\n      this.videoDevices = videoDevices;\n      this.eventHandler.fire(\"onVideoDeviceChange\", this.videoDevices);\n    }\n\n    const audioDevices = devices\n      .filter((device) => device.kind === \"audioinput\")\n      .sort();\n\n    if (!isEqual(audioDevices, this.audioDevices)) {\n      this.audioDevices = audioDevices;\n      this.eventHandler.fire(\"onAudioDeviceChange\", this.audioDevices);\n    }\n  };\n\n  updateConstraints = (constraints: MediaStreamConstraints) => {\n    this.constraints = { ...this.constraints, ...constraints };\n  };\n\n  selectVideoDeviceById = (deviceId: string) => {\n    this.updateConstraints({ video: { deviceId } });\n    this.requestStream();\n  };\n\n  selectAudioDeviceById = (deviceId: string) => {\n    this.updateConstraints({ audio: { deviceId } });\n    this.requestStream();\n  };\n\n  requestStream = async () => {\n    const stream = await navigator.mediaDevices.getUserMedia(this.constraints);\n    await this.handleDeviceChange();\n    this.stream.getTracks().forEach((track) => {\n      track.stop();\n      this.stream.removeTrack(track);\n    });\n    stream.getTracks().forEach((track) => {\n      this.stream.addTrack(track);\n    });\n    //this.stream = stream;\n    this.eventHandler.fire(\"onStreamChange\", stream);\n    this.eventHandler.fire(\n      \"onSelectedVideoDeviceChange\",\n      this.getSelectedVideoDevice()\n    );\n\n    this.eventHandler.fire(\n      \"onSelectedAudioDeviceChange\",\n      this.getSelectedAudioDevice()\n    );\n  };\n\n  getStream = () => {\n    return this.stream;\n  };\n\n  getSelectedDevice = (\n    stream: MediaStream,\n    devices: MediaDeviceInfo[],\n    kind: \"video\" | \"audio\"\n  ) => {\n    if (stream) {\n      return devices.find((device) => {\n        return stream\n          .getTracks()\n          .filter((track) => track.kind === kind)\n          .find((track) => track.label === device.label);\n      });\n    }\n  };\n\n  getSelectedVideoDevice = () => {\n    return this.getSelectedDevice(this.stream, this.videoDevices, \"video\");\n  };\n\n  getSelectedAudioDevice = () => {\n    return this.getSelectedDevice(this.stream, this.audioDevices, \"audio\");\n  };\n}\n\nexport default withEventHandler<\n  WebRTCDeviceManagerEvent,\n  typeof WebRTCDeviceManager\n>(WebRTCDeviceManager);\n","import React, { useState, useEffect, useMemo, useRef } from \"react\";\nimport WebRTCDeviceManager from \"../../library/WebRTCDeviceManager\";\n\nexport type WebRTCDeviceManagerState = {\n  stream: MediaStream;\n  videoDevices: MediaDeviceInfo[];\n  audioDevices: MediaDeviceInfo[];\n  selectedVideoDevice?: MediaDeviceInfo;\n  selectedAudioDevice?: MediaDeviceInfo;\n  selectVideoDeviceById: (deviceId: string) => void;\n  selectAudioDeviceById: (deviceId: string) => void;\n  requestPermission: () => Promise<void>;\n};\n\nconst WebRTCDeviceManagerContext =\n  React.createContext<WebRTCDeviceManagerState>({\n    stream: new MediaStream(),\n    videoDevices: [],\n    audioDevices: [],\n    selectVideoDeviceById: () => {},\n    selectAudioDeviceById: () => {},\n    requestPermission: async () => {},\n  });\n\nexport const useWebRTCDeviceManager = () => {\n  const context = React.useContext(WebRTCDeviceManagerContext);\n\n  if (context === undefined) {\n    throw new Error(\n      \"useDevice must be used within a WebRTCDeviceManagerProvider\"\n    );\n  }\n  return context;\n};\n\nexport const WebRTCDeviceManagerProvider = ({\n  children,\n}: {\n  children: React.ReactNode;\n}) => {\n  const WebRTCDeviceManagerInstance = useRef(new WebRTCDeviceManager()).current;\n\n  const [videoDevices, setVideoDevices] = useState<MediaDeviceInfo[]>([]);\n  const [audioDevices, setAudioDevices] = useState<MediaDeviceInfo[]>([]);\n  const [selectedVideoDevice, setSelectedVideoDevice] =\n    useState<MediaDeviceInfo>();\n  const [selectedAudioDevice, setSelectedAudioDevice] =\n    useState<MediaDeviceInfo>();\n\n  const [stream, setStream] = useState<MediaStream>(\n    WebRTCDeviceManagerInstance.getStream()\n  );\n\n  useEffect(() => {\n    WebRTCDeviceManagerInstance.addEventListener(\"onStreamChange\", setStream);\n    WebRTCDeviceManagerInstance.addEventListener(\n      \"onVideoDeviceChange\",\n      setVideoDevices\n    );\n    WebRTCDeviceManagerInstance.addEventListener(\n      \"onAudioDeviceChange\",\n      setAudioDevices\n    );\n    WebRTCDeviceManagerInstance.addEventListener(\n      \"onSelectedVideoDeviceChange\",\n      setSelectedVideoDevice\n    );\n    WebRTCDeviceManagerInstance.addEventListener(\n      \"onSelectedAudioDeviceChange\",\n      setSelectedAudioDevice\n    );\n    return () => {\n      WebRTCDeviceManagerInstance.removeEventListener(\n        \"onStreamChange\",\n        setStream\n      );\n      WebRTCDeviceManagerInstance.removeEventListener(\n        \"onVideoDeviceChange\",\n        setVideoDevices\n      );\n      WebRTCDeviceManagerInstance.removeEventListener(\n        \"onAudioDeviceChange\",\n        setAudioDevices\n      );\n      WebRTCDeviceManagerInstance.removeEventListener(\n        \"onSelectedVideoDeviceChange\",\n        setSelectedVideoDevice\n      );\n      WebRTCDeviceManagerInstance.removeEventListener(\n        \"onSelectedAudioDeviceChange\",\n        setSelectedAudioDevice\n      );\n    };\n  }, [WebRTCDeviceManagerInstance]);\n\n  const webRTCDeviceManagerContext = useMemo(() => {\n    return {\n      stream,\n      videoDevices,\n      audioDevices,\n      selectedVideoDevice,\n      selectedAudioDevice,\n      selectVideoDeviceById: WebRTCDeviceManagerInstance.selectVideoDeviceById,\n      selectAudioDeviceById: WebRTCDeviceManagerInstance.selectAudioDeviceById,\n      requestPermission: WebRTCDeviceManagerInstance.requestStream,\n    };\n  }, [\n    stream,\n    videoDevices,\n    audioDevices,\n    selectedVideoDevice,\n    selectedAudioDevice,\n    WebRTCDeviceManagerInstance,\n  ]);\n\n  return (\n    <WebRTCDeviceManagerContext.Provider value={webRTCDeviceManagerContext}>\n      {children}\n    </WebRTCDeviceManagerContext.Provider>\n  );\n};\n","import React, { useEffect, useRef, useState } from \"react\";\nimport User from \"../../library/User\";\nimport VideoStream from \"../../library/VideoStream\";\nimport { useWebRTCDeviceManager } from \"./WebRTCDeviceManagerContext\";\n\nexport type UserState = {\n  name: string;\n  email: string;\n  user: InstanceType<typeof User>;\n  videoStream: VideoStream;\n};\n\nexport type UserActionFunctions = {\n  updateName: (name: string) => void;\n  updateEmail: (email: string) => void;\n};\n\nconst UserContext =\n  React.createContext<(UserState & UserActionFunctions) | undefined>(undefined);\n\nexport const useUser = () => {\n  const context = React.useContext(UserContext);\n\n  if (context === undefined) {\n    throw new Error(\"useUser must be used within a UserProvider\");\n  }\n\n  return context;\n};\n\nexport const UserProvider = ({ children }: { children: React.ReactNode }) => {\n  const { stream } = useWebRTCDeviceManager();\n  const UserInstance = useRef(new User()).current;\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const videoStream = useRef(UserInstance.getStream()).current;\n\n  useEffect(() => {\n    UserInstance.addEventListener(\"onNameChange\", setName);\n    UserInstance.addEventListener(\"onEmailChange\", setEmail);\n    UserInstance.setStream(stream);\n\n    return () => {\n      UserInstance.removeEventListener(\"onNameChange\", setName);\n      UserInstance.removeEventListener(\"onEmailChange\", setEmail);\n    };\n  }, [UserInstance, stream]);\n\n  const userContext = React.useMemo(() => {\n    return {\n      name,\n      email,\n      user: UserInstance,\n      videoStream,\n      updateName: UserInstance.setName,\n      updateEmail: UserInstance.setEmail,\n    };\n  }, [name, email, videoStream, UserInstance]);\n\n  return (\n    <UserContext.Provider value={userContext}>{children}</UserContext.Provider>\n  );\n};\n","import {\n  VideoHTMLAttributes,\n  useEffect,\n  useRef,\n  useCallback,\n  useState,\n} from \"react\";\nimport Button from \"./Button\";\n\ntype PropsType = VideoHTMLAttributes<HTMLVideoElement> & {\n  srcObject: MediaStream;\n  withControls?: boolean;\n};\n\nexport default function Video({\n  srcObject,\n  withControls = false,\n  ...props\n}: PropsType) {\n  const refVideo = useRef<HTMLVideoElement>(null);\n  const [isVideoActive, setIsVideoActive] = useState(true);\n  const [isAudioActive, setIsAudioActive] = useState(true);\n\n  useEffect(() => {\n    if (!refVideo.current) return;\n    refVideo.current.srcObject = srcObject;\n  }, [srcObject]);\n\n  const toggleVideo = useCallback(() => {\n    setIsVideoActive(!isVideoActive);\n    srcObject.getVideoTracks().forEach((track) => {\n      track.enabled = !isVideoActive;\n    });\n  }, [isVideoActive, srcObject]);\n\n  const toggleAudio = useCallback(() => {\n    setIsAudioActive(!isAudioActive);\n    srcObject.getAudioTracks().forEach((track) => {\n      track.enabled = !isAudioActive;\n    });\n  }, [isAudioActive, srcObject]);\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        backgroundColor: \"black\",\n      }}\n    >\n      <div style={{ position: \"relative\" }}>\n        <video ref={refVideo} {...props} />\n        <div\n          style={{\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: \"3px\",\n            display: \"flex\",\n            alignItems: \"flex-end\",\n            justifyContent: \"center\",\n          }}\n        >\n          {withControls && (\n            <>\n              <div style={{ margin: \"10px 5px\" }}>\n                <Button onClick={toggleVideo}>\n                  {isVideoActive ? \"Hide Video\" : \"Show Video\"}\n                </Button>\n              </div>\n              <div style={{ margin: \"10px 5px\" }}>\n                <Button onClick={toggleAudio}>\n                  {isAudioActive ? \"Mute Audio\" : \"Unmute Audio\"}\n                </Button>\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import \"./DeviceDiscoveryPage.css\";\nimport { ChangeEvent, useEffect, useRef } from \"react\";\n\nimport Button from \"../../components/Button\";\nimport Select from \"../../components/Select\";\nimport { Link, RouteComponentProps } from \"@reach/router\";\nimport { useUser } from \"../../contexts/UserContext\";\nimport { useWebRTCDeviceManager } from \"../../contexts/WebRTCDeviceManagerContext\";\nimport Video from \"../../components/Video\";\n\nexport interface DeviceDiscoveryPageProps extends RouteComponentProps {}\n\nfunction DeviceDiscoveryPage(props: DeviceDiscoveryPageProps) {\n  const {\n    stream,\n    videoDevices,\n    audioDevices,\n    selectedVideoDevice,\n    selectedAudioDevice,\n    selectVideoDeviceById,\n    selectAudioDeviceById,\n    requestPermission,\n  } = useWebRTCDeviceManager();\n\n  const { name, updateName } = useUser();\n\n  useEffect(() => {\n    requestPermission();\n  }, [requestPermission]);\n\n  const handleInputChange = useRef((event: ChangeEvent<HTMLInputElement>) => {\n    updateName(event.target.value);\n  }).current;\n\n  const handleVideoSelectChange = useRef(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      selectVideoDeviceById(event.target.value);\n    }\n  ).current;\n\n  const handleAudioSelectChange = useRef(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      selectAudioDeviceById(event.target.value);\n    }\n  ).current;\n\n  return (\n    <div className=\"DeviceDiscoveryPage\">\n      <div className=\"DeviceDiscoveryPage-container\">\n        <div>\n          <Video srcObject={stream} muted autoPlay playsInline />\n        </div>\n        <div>\n          <input\n            type={\"text\"}\n            value={name}\n            onChange={handleInputChange}\n            placeholder={\"Your Name\"}\n            className=\"DeviceDiscoveryPage-name\"\n          />\n        </div>\n        <div>\n          <Select\n            width={\"100%\"}\n            value={selectedVideoDevice?.deviceId}\n            onChange={handleVideoSelectChange}\n          >\n            {videoDevices.map((videoDevice) => (\n              <option key={videoDevice.deviceId} value={videoDevice.deviceId}>\n                {videoDevice.label}\n              </option>\n            ))}\n          </Select>\n        </div>\n        <div>\n          <Select\n            width={\"100%\"}\n            value={selectedAudioDevice?.deviceId}\n            onChange={handleAudioSelectChange}\n          >\n            {audioDevices.map((audioDevice) => (\n              <option key={audioDevice.deviceId} value={audioDevice.deviceId}>\n                {audioDevice.label}\n              </option>\n            ))}\n          </Select>\n        </div>\n        <div>\n          <Link to=\"/conference\">\n            <Button disabled={name.length < 3}>Enter Room</Button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default DeviceDiscoveryPage;\n","import \"./HomePage.css\";\nimport Button from \"../../components/Button\";\nimport { RouteComponentProps, Link } from \"@reach/router\";\n\nfunction HomePage(props: RouteComponentProps) {\n  return (\n    <div className={\"HomePage\"}>\n      <div>\n        <h1>Video Conference</h1>\n        <Link to=\"/deviceDiscovery\">\n          <Button>Start</Button>\n        </Link>\n      </div>\n    </div>\n  );\n}\n\nexport default HomePage;\n","import User from \"./User\";\nimport { Socket } from \"socket.io-client\";\nimport SimplePeer, { SignalData } from \"simple-peer\";\nimport EventHandler, { withEventHandler } from \"./EventHandler\";\n\ntype PeerEvent = {\n  onStream: (remoteStreams: MediaStream) => void;\n};\n\nexport class Peer extends SimplePeer {\n  socket: Socket;\n  user: InstanceType<typeof User>;\n  socketId: string;\n  eventHandler: EventHandler<PeerEvent>;\n\n  constructor(socket: Socket, socketId: string, opts?: SimplePeer.Options) {\n    super({ ...opts });\n    this.socket = socket;\n    this.user = new User();\n    this.socketId = socketId;\n    this.eventHandler = new EventHandler<PeerEvent>();\n\n    this.on(\"signal\", this.onSignal);\n    this.on(\"stream\", this.onStream);\n  }\n\n  onSignal = (data: SignalData) => {\n    this.socket.emit(\"signal\", {\n      signal: data,\n      socketId: this.socketId,\n    });\n  };\n\n  onStream = (stream: MediaStream) => {\n    this.eventHandler.fire(\"onStream\", stream);\n    this.user.setStream(stream);\n  };\n\n  stopStream = () => {\n    this.user.getStream().stopStream();\n  };\n\n  getUser = () => {\n    return this.user;\n  };\n}\n\nexport default withEventHandler<PeerEvent, typeof Peer>(Peer);\n","import { Socket } from \"socket.io-client\";\nimport EventHandler, { withEventHandler } from \"./EventHandler\";\nimport Peer from \"./Peer\";\nimport User from \"./User\";\n\ntype PeerManagerEvent = {\n  onConnect: (peer: InstanceType<typeof Peer>[]) => void;\n  onDisconnect: (peer: InstanceType<typeof Peer>[]) => void;\n};\n\nclass PeerManager {\n  socket: Socket;\n  user: InstanceType<typeof User>;\n  peers: { [key: string]: InstanceType<typeof Peer> };\n  eventHandler: EventHandler<PeerManagerEvent>;\n  configuration: {};\n\n  constructor(\n    socket: Socket,\n    user: InstanceType<typeof User>,\n    configuration: {}\n  ) {\n    this.peers = {};\n    this.user = user;\n    this.socket = socket;\n    this.eventHandler = new EventHandler<PeerManagerEvent>();\n    this.configuration = configuration;\n  }\n\n  connect = () => {\n    this.socket.connect();\n    this.socket.on(\"newCaller\", this.newCaller);\n    this.socket.on(\"receivedCall\", this.receivedCall);\n    this.socket.on(\"signal\", this.signal);\n    this.socket.on(\"removePeer\", this.removePeer);\n    this.socket.on(\"disconnect\", this.disconnect);\n  };\n\n  addPeer = (socketId: string, isInitiator: boolean = false) => {\n    this.peers[socketId] = new Peer(this.socket, socketId, {\n      stream: this.user.getStream(),\n      config: this.configuration,\n      initiator: isInitiator,\n    });\n  };\n\n  newCaller = (socketId: string) => {\n    this.socket.emit(\"receivedCall\", socketId);\n    this.addPeer(socketId);\n    this.eventHandler.fire(\n      \"onConnect\",\n      Object.keys(this.peers).map((key) => this.peers[key])\n    );\n  };\n\n  receivedCall = (socketId: string) => {\n    this.addPeer(socketId, true);\n    this.eventHandler.fire(\n      \"onConnect\",\n      Object.keys(this.peers).map((key) => this.peers[key])\n    );\n  };\n\n  signal = (data: { socketId: string; signal: any }) => {\n    if (this.peers[data.socketId]) {\n      this.peers[data.socketId].signal(data.signal);\n    }\n  };\n\n  removePeer = (socketId: string) => {\n    if (this.peers[socketId]) {\n      this.peers[socketId].stopStream();\n      if (this.peers[socketId]) this.peers[socketId].destroy();\n      delete this.peers[socketId];\n      this.eventHandler.fire(\n        \"onDisconnect\",\n        Object.keys(this.peers).map((key) => this.peers[key])\n      );\n    }\n  };\n\n  disconnect = () => {\n    for (let socketId in this.peers) {\n      this.removePeer(socketId);\n    }\n  };\n}\n\nexport default withEventHandler<PeerManagerEvent, typeof PeerManager>(\n  PeerManager\n);\n","const rtcConfiguration = {\n  iceServers: [\n    {\n      urls: \"stun:stun.l.google.com:19302\",\n    },\n    // public turn server from https://gist.github.com/sagivo/3a4b2f2c7ac6e1b5267c2f1f59ac6c6b\n    // set your own servers here\n    {\n      url: \"turn:192.158.29.39:3478?transport=udp\",\n      credential: \"JZEOEt2V3Qb0y27GRntt2u2PAYA=\",\n      username: \"28224511:1379330808\",\n    },\n  ],\n};\n\nexport default rtcConfiguration;\n","import React, { useContext, useRef } from \"react\";\nimport socketIOClient, { Socket } from \"socket.io-client\";\n\nconst SocketContext = React.createContext<Socket | undefined>(undefined);\n\nexport const useSocket = () => {\n  const context = useContext(SocketContext);\n\n  if (context === undefined) {\n    throw new Error(\"useSocket must be used within a SocketProvider\");\n  }\n\n  return context;\n};\n\nexport const SocketProvider = ({\n  endpoint = \"http://localhost:5000/\",\n  children,\n}: {\n  endpoint: string;\n  children: React.ReactNode;\n}) => {\n  const socket = useRef(\n    socketIOClient(endpoint, { autoConnect: false })\n  ).current;\n\n  return (\n    <SocketContext.Provider value={socket}>{children}</SocketContext.Provider>\n  );\n};\n","import React, { useContext, useMemo, useRef } from \"react\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport Peer from \"../../library/Peer\";\nimport PeerManager from \"../../library/PeerManager\";\nimport rtcConfiguration from \"../config/rtcConfiguration\";\nimport { useSocket } from \"./SocketContext\";\nimport { useUser } from \"./UserContext\";\n\ntype PeerManagerState = {\n  connect: () => void;\n  peers: InstanceType<typeof Peer>[];\n};\n\nconst PeerManagerContext = React.createContext<PeerManagerState | undefined>(\n  undefined\n);\n\nexport const usePeerManager = () => {\n  const context = useContext(PeerManagerContext);\n\n  if (context === undefined) {\n    throw new Error(\"usePeerManager must be used within a PeerManagerProvider\");\n  }\n\n  return context;\n};\n\nexport const PeerManagerProvider = ({\n  children,\n}: {\n  children: React.ReactNode;\n}) => {\n  const socket = useSocket();\n  const { user } = useUser();\n  const [peers, setPeers] = useState<InstanceType<typeof Peer>[]>([]);\n\n  const PeerManagerInstance = useRef(\n    new PeerManager(socket, user, rtcConfiguration)\n  ).current;\n\n  useEffect(() => {\n    PeerManagerInstance.addEventListener(\"onConnect\", setPeers);\n    PeerManagerInstance.addEventListener(\"onDisconnect\", setPeers);\n    return () => {\n      PeerManagerInstance.removeEventListener(\"onConnect\", setPeers);\n      PeerManagerInstance.removeEventListener(\"onDisconnect\", setPeers);\n    };\n  }, [PeerManagerInstance]);\n\n  const peerManagerContext = useMemo(() => {\n    return {\n      connect: PeerManagerInstance.connect,\n      peers,\n    };\n  }, [PeerManagerInstance, peers]);\n\n  return (\n    <PeerManagerContext.Provider value={peerManagerContext}>\n      {children}\n    </PeerManagerContext.Provider>\n  );\n};\n","import { Socket } from \"socket.io-client\";\nimport EventHandler, { withEventHandler } from \"./EventHandler\";\n\nexport type ChatMessage = {\n  message: string;\n  username: string;\n};\n\ntype ChatEvent = {\n  onSend: (messages: ChatMessage[]) => void;\n  onReceive: (messages: ChatMessage[]) => void;\n};\n\nclass Chat {\n  socket: Socket;\n  messages: ChatMessage[];\n  eventHandler: EventHandler<ChatEvent>;\n\n  constructor(socket: Socket) {\n    this.socket = socket;\n    this.messages = [];\n\n    this.socket.on(\"receiveMessage\", this.receive);\n    this.eventHandler = new EventHandler<ChatEvent>();\n  }\n\n  receive = (chatMessage: ChatMessage) => {\n    this.messages.push(chatMessage);\n\n    this.eventHandler.fire(\"onReceive\", [...this.messages]);\n  };\n\n  send = (message: string) => {\n    this.messages.push({ message, username: \"Me\" });\n    this.eventHandler.fire(\"onSend\", [...this.messages]);\n    this.socket.emit(\"sendMessage\", message);\n  };\n\n  getMessages = () => {\n    return this.messages;\n  };\n}\n\nexport default withEventHandler<ChatEvent, typeof Chat>(Chat);\n","import React, { useRef, useState, useMemo, useEffect, useContext } from \"react\";\nimport Chat, { ChatMessage } from \"../../library/Chat\";\nimport { useSocket } from \"./SocketContext\";\n\ntype ChatState = {\n  messages: ChatMessage[];\n  sendMessage: (message: string) => void;\n};\n\nconst ChatContext = React.createContext<ChatState | undefined>(undefined);\n\nexport const useChat = () => {\n  const context = useContext(ChatContext);\n\n  if (context === undefined) {\n    throw new Error(\"useChat must be used within a ChatProvider\");\n  }\n\n  return context;\n};\n\nexport const ChatProvider = ({ children }: { children: React.ReactNode }) => {\n  const socket = useSocket();\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n\n  const ChatInstance = useRef(new Chat(socket)).current;\n\n  useEffect(() => {\n    ChatInstance.addEventListener(\"onReceive\", setMessages);\n    ChatInstance.addEventListener(\"onSend\", setMessages);\n    return () => {\n      ChatInstance.removeEventListener(\"onReceive\", setMessages);\n      ChatInstance.removeEventListener(\"onSend\", setMessages);\n    };\n  }, [ChatInstance]);\n\n  const chatContext = useMemo(() => {\n    return {\n      messages,\n      sendMessage: ChatInstance.send,\n    };\n  }, [messages, ChatInstance]);\n\n  return (\n    <ChatContext.Provider value={chatContext}>{children}</ChatContext.Provider>\n  );\n};\n","import \"./ConferencePage.css\";\nimport { RouteComponentProps } from \"@reach/router\";\nimport Video from \"../../components/Video\";\nimport { useWebRTCDeviceManager } from \"../../contexts/WebRTCDeviceManagerContext\";\nimport React, {\n  ChangeEvent,\n  FormEvent,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport Button from \"../../components/Button\";\nimport { usePeerManager } from \"../../contexts/PeerManagerContext\";\nimport { Peer } from \"../../../library/Peer\";\nimport { useChat } from \"../../contexts/ChatContext\";\nimport { useSocket } from \"../../contexts/SocketContext\";\nimport { useUser } from \"../../contexts/UserContext\";\n\nexport interface ConferencePageProps extends RouteComponentProps {}\n\nfunction ConferencePage(props: ConferencePageProps) {\n  const { stream, requestPermission } = useWebRTCDeviceManager();\n  const { user } = useUser();\n  const socket = useSocket();\n\n  const { connect, peers } = usePeerManager();\n\n  const [message, setMessage] = useState(\"\");\n  const { messages, sendMessage } = useChat();\n\n  useEffect(() => {\n    requestPermission().then(() => {\n      socket.auth = { username: user.name };\n      connect();\n    });\n  }, [requestPermission, connect, socket, user]);\n\n  const handleMessage = useRef((event: ChangeEvent<HTMLInputElement>) => {\n    setMessage(event.target.value);\n  }).current;\n\n  const handleSubmit = useCallback(\n    (event: FormEvent<HTMLFormElement>) => {\n      if (message !== \"\") {\n        sendMessage(message);\n        setMessage(\"\");\n      }\n      event.preventDefault();\n    },\n    [message, sendMessage]\n  );\n\n  return (\n    <>\n      <div className=\"ConferencePage\">\n        <div className=\"ConferencePage-video-container\">\n          <Video srcObject={stream} muted autoPlay playsInline withControls />\n          {peers.map((peer: InstanceType<typeof Peer>, index: number) => {\n            return (\n              <Video\n                key={index.toString()}\n                srcObject={peer.getUser().getStream()}\n                autoPlay\n                playsInline\n                style={{ maxWidth: \"50vw\", maxHeight: \"50vh\" }}\n              />\n            );\n          })}\n        </div>\n        <div className=\"ConferencePage-chat\">\n          <p className=\"ConferencePage-chat-messages\">\n            {messages.map((m, index: number) => (\n              <div key={index.toString()}>\n                <span>\n                  {m.username}: {m.message}\n                </span>\n              </div>\n            ))}\n          </p>\n          <form onSubmit={handleSubmit}>\n            <div className=\"ConferencePage-chat-field\">\n              <input\n                type={\"text\"}\n                value={message}\n                onChange={handleMessage}\n                placeholder={\"Send a message\"}\n              />\n              <Button type={\"submit\"}>Send</Button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default ConferencePage;\n","import DeviceDiscoveryPage from \"./pages/DeviceDiscoveryPage/DeviceDiscoveryPage\";\nimport HomePage from \"./pages/HomePage/HomePage\";\nimport { Router } from \"@reach/router\";\nimport ConferencePage from \"./pages/ConferencePage/ConferencePage\";\nimport { UserProvider } from \"./contexts/UserContext\";\nimport { WebRTCDeviceManagerProvider } from \"./contexts/WebRTCDeviceManagerContext\";\nimport { PeerManagerProvider } from \"./contexts/PeerManagerContext\";\nimport { SocketProvider } from \"./contexts/SocketContext\";\nimport { ChatProvider } from \"./contexts/ChatContext\";\n\nfunction App() {\n  return (\n    <WebRTCDeviceManagerProvider>\n      <UserProvider>\n        <SocketProvider endpoint={\"http://localhost:5000\"}>\n          <PeerManagerProvider>\n            <ChatProvider>\n              <Router>\n                <HomePage path=\"/\" default />\n                <DeviceDiscoveryPage path=\"/deviceDiscovery\" />\n                <ConferencePage path=\"/conference\" />\n              </Router>\n            </ChatProvider>\n          </PeerManagerProvider>\n        </SocketProvider>\n      </UserProvider>\n    </WebRTCDeviceManagerProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}